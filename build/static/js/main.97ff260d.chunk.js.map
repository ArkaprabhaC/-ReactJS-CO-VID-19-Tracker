{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","newData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","slice","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","id","onChange","e","target","index","key","App","state","fetchedData","setState","this","class","style","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97ff260d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cards.css';\r\nimport CountUp from 'react-countup';\r\n\r\nconst Cards = ({data: {confirmed,recovered,deaths,lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return \"Loading Charts..\";\r\n    }\r\n    \r\n    return(\r\n        <div className=\"row justify-content-center my-5 mx-0\">\r\n            <div className=\"col-md-4 col-9 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body confirmed\">\r\n                        <h5 className=\"card-title text-primary font-weight-light\">Confirmed</h5>\r\n                        <p className=\"card-text m-0\">\r\n                            <CountUp \r\n                                className=\"text-primary\"\r\n                                start={0} \r\n                                end={confirmed.value} \r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </p>\r\n                        <p className=\"text-secondary m-0\">{new Date(lastUpdate).toDateString()}</p>                    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-9 mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body recovered\">\r\n                        <h5 className=\"card-title text-success font-weight-light\">Recovered</h5>\r\n                        <p className=\"card-text m-0\">\r\n                            <CountUp \r\n                                className=\"text-success\"\r\n                                start={0} \r\n                                end={recovered.value} \r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </p>\r\n                        <p className=\"text-secondary m-0\">{new Date(lastUpdate).toDateString()}</p> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4 col-9 mb-0\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body deaths\">\r\n                        <h5 className=\"card-title text-danger font-weight-light\">Deaths</h5>\r\n                        <p className=\"card-text m-0\">\r\n                            <CountUp \r\n                                className=\"text-danger\"\r\n                                start={0} \r\n                                end={deaths.value} \r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </p>\r\n                        <p className=\"text-secondary m-0\">{new Date(lastUpdate).toDateString()}</p> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const newData = data.map((dailyData) => ({  //creates a new array!\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }));\r\n\r\n        return newData;\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name);  //returns a new array \r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {fetchDailyData} from '../../api/index';\r\nimport  {Line,Bar} from 'react-chartjs-2';\r\n\r\nconst Charts = ({data: {confirmed, deaths, recovered}, country}) => {\r\n\r\n    const [dailyData,setDailyData] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async () =>{\r\n            setDailyData(await fetchDailyData());  //sets the array here\r\n        }\r\n        fetchAPI();\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData.length !== 0 ? \r\n            <Line\r\n                data={{\r\n                    labels: dailyData.slice(dailyData.length-100).map(({date}) =>  date),  //indicates data in x direction! //label accepts array\r\n                    datasets: [{\r\n                        data: dailyData.slice(dailyData.length-100).map(({confirmed}) => confirmed),\r\n                        label: \"Infected\",\r\n                        borderColor: '#3333ff',\r\n                        fill:true\r\n                    }, {\r\n                        data: dailyData.slice(dailyData.length-100).map(({deaths}) => deaths),\r\n                        label: \"Deaths\",\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.7)',\r\n                        fill:true\r\n                    }]\r\n                }}\r\n                \r\n            /> : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ? \r\n            (\r\n                <Bar\r\n                    data={{\r\n                        labels:['Infected','Recovered','Deaths'],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(0,0,255,0.7)','rgba(0,255,0,0.7)','rgba(255,0,0,0.7)'],\r\n                            data:[confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n                    }}\r\n                    \r\n                    options={{\r\n                        legend: {display: false},\r\n                        title: {display: true, text: `Current State in ${country}`}\r\n                    }}\r\n                />\r\n            \r\n            ) : null\r\n    );\r\n\r\n    return(\r\n        <div>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {fetchCountries} from '../../api/index';\r\n\r\nconst CountryPicker = ({handleCountryChange}) =>{\r\n   \r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n        \r\n    },[setFetchedCountries]);\r\n\r\n\r\n    return(\r\n        <select className=\"form-control col-md-6 col-8 mx-auto mt-3 mb-3\" id=\"select-country\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n           <option value=\"\">Global</option>\r\n           {fetchedCountries.map((country,index)=> {\r\n               return <option key={country+index} value={country}>{country}</option>\r\n           })}\r\n       </select>\r\n     )\r\n    \r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { Fragment} from 'react';\r\n\r\nimport { Cards, Charts, CountryPicker } from './components/index';\r\nimport {fetchData} from './api/index';\r\nimport './App.module.css';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        countries: '',\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        this.setState({\r\n            data: fetchedData\r\n        });\r\n    }\r\n\r\n    handleCountryChange = async (country) =>{\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({\r\n            data: fetchedData,\r\n            country: country\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {data,country} = this.state; \r\n\r\n        return (\r\n            <Fragment> \r\n                <h2 class=\"text-center text-uppercase text-weight-bold \">Coronavirus Tracker</h2>\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <Cards data={data}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center mb-4\">\r\n                        <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                    </div>\r\n                    <Charts data={data} country={country}/>  \r\n                </div>\r\n                <footer className=\"mt-5 footer\">\r\n                    <div className=\"container pt-3\">\r\n                        <p className=\"text-center font-weight-light mb-0\">By <span style={{\"border-bottom\":\"2px solid black\"}}>Arkaprabha Chatterjee</span></p>\r\n                        <p className=\"text-center font-weight-light mt-2\">Drop a mail <a href=\"mailto:arkaprabha.chatterjee31@gmail.com\">\r\n                            here</a> if you wish to collaborate.</p>\r\n                    </div>\r\n                </footer>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById(\"root\"));"],"sourceRoot":""}